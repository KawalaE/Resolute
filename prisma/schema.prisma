// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Issue {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(256)
  description      String    @db.Text
  status           Status    @default(OPEN)
  priority         Priority  @default(LOW)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  assignedToUserId String?   @db.VarChar(256)
  assignedToUser   User?     @relation(fields: [assignedToUserId], references: [id])
  comments         Comment[]

  @@fulltext([title])
}

model Comment {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  createdAt   DateTime @default(now())

  assignedToUserId String?
  assignedToUser   User?   @relation(fields: [assignedToUserId], references: [id])

  assignToIssueId Int?
  assignToIssue   Issue? @relation(fields: [assignToIssueId], references: [id])
}

//enum - set of constant names
enum Status {
  OPEN
  IN_PROGRESS
  CLOSED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @map("user_id")
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String?   @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  accounts         Account[]
  sessions         Session[]
  assignedIssues   Issue[]
  assignedComments Comment[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
